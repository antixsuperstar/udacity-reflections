How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By stripping off the identical lines and just focusing on what changed
    between the two files, less time is used in fixing.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Memory fades, so it's easier to understand what and how your code changed
    with time by looking at the actual code, than trying to remember from scratch.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Automatic saving can be very convenient by having one thing less to worry about,
    but it could lead to having [multiple] savepoints related to no achievement at all.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    In programming, a single feature can depend --usually does-- from changes in several
    files (backend/frontend). This is very convenient for the magic "Undo" button to work.
    Docs is not designed to host programming files, but individual pieces.

How can you use the commands git log and git diff to view the history of files?

    git log lists all the commits of the repository, and once we identify the
    relevant ones, git diff shows the changes between two commits.

How might using version control make you more confident to make changes that
could break something?

    In case of panic, there's always an "Undo" button available :P

Now that you have your workspace set up, what do you want to try using Git for?

    A school system already in production that needs improvements.
