When would you want to use a remote repository rather than keeping all your work local?
  It'd become useful when I need access from another computer, or maybe sharing a proyect
  with someone else, without having to set up a remote server.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?
  So every commit still means a new feature, some logical change, which is what a commit
  is intended to be.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
  Fork - GitHub's version of cloning a repository directly into GitHub.
  Clones - Local copies of git repositories, including commit history.
  Branches - Concept used to introduce [experimental] changes to the code that diverge
  from the "main" program (but may eventually be incorporated).
  Cloning is used when the repositories are not using GitHub and branches are used when
  you want to start something leaving alone the program's main status.

What is the benefit of having a copy of the last known state of the remote stored locally?
  You don't need internet access to checkout, diff, merge, branch remote versions
  and navigate through their commits.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
  I imagine using a shared folder where everyone should keep a folder structure to
  order software revisions... It'd definitively be more difficult to collaborate; worse
  trying to do it concurrently.

When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?
  I'd make a separate branch if I want to introduce a [major] change in core functionality.
  Otherwise, if I'm just improving or adding features, I think i'd be ok to stay in
  master branch.
