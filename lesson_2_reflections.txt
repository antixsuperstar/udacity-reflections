What happens when you initialize a repository? Why do you need to do it?

Git creates its hidden directory. It's needed for using git functions.


How is the staging area different from the working directory and the repository? What value do you think it offers?

It's like a list of files git should track, which could be not ALL of the files contained. It offers more control by monitoring only the relevant files involved in a commit.


How can you use the staging area to make sure you have one commit per logical change?

By adding only the files involved in such change. It's nonsense adding others.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

By separating production and experimental versions (or other versions) you keep the "Undo" button working. If later on you want to integrate a new funcitonality into the production version, merging branches keeps giving the user a consistent improved experience.


How do the diagrams help you visualize the branch structure?

By seeing a draw is easier to understand how changes evolve during time and helps --i think-- with future merging procedures, making sure of what we ask is what we want.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging includes changes made in the tips of two branches, creating a new unified tip. The diagram shows exactly that: the integration of both set of changes from the two branches. 


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Automatic takes out the hassle off combining several versions of the same file, but can't resolve conflicts when they arise.
Manual merging gives full control of what changes butcould become tedious when ther's a lot of code involved.
